This file contains notes to coders who want to contribute to the project

#
# Code Style
#
The code must run under Python 3.9+

Follow the PEP 8 style guide. Use modern Python tooling for formatting:

# Format code
black src/compiletools/
# or
ruff format src/compiletools/

# Lint code  
ruff check src/compiletools/



#
# Running unittests
#
The unit tests are written using the Python unittest framework. They can be run using:

# Set PYTHONPATH to include src directory
PYTHONPATH=src python -m unittest discover src/compiletools
# or specific test modules
PYTHONPATH=src python -m unittest compiletools.test_utils
# or with verbose output
PYTHONPATH=src python -m unittest discover src/compiletools -v

#
# Running coverage tests
#
PYTHONPATH=src pytest --cov=compiletools src/compiletools/test_*
# or
PYTHONPATH=src coverage run -m unittest discover src/compiletools
coverage report

#
# Caches/Performance
#
When you are doing performance testing there are 3 caches you need to be aware of

1) ccache:  This can be cleaned by ccache -C
2) cake:    The default is for any caches to be kept in the bin directory.  rm -rf bin 
3) ct-*:    The default cache is supplied by the appdirs module.  
            So on linux that means the XDG user cache directory which defaults to $HOME/.cache/ct.  
                rm -rf ~/.cache/ct
            Note that it obeys the XDG variables.  Alter XDG_CACHE_HOME if you need to move the cache.
            ct-cache-clean will correctly remove the cache as specified by the XDG_CACHE_HOME
            It is possible to override the above by specifying the CTCACHE environment variable.
            CTCACHE=None turns off diskcaching

#
# Gotchas
#
If you encounter cache-related issues, clear the cache using:
ct-cache-clean

#
# Package Structure
#
src/compiletools/     - Main package code (moved from ct/)
ct-*                  - Command-line scripts  
pyproject.toml        - Modern Python packaging configuration
CLAUDE.md            - Project documentation and build instructions

#
# Development Setup
#
# Install development dependencies
uv pip install -e ".[dev]"

# or manually install dev tools
pip install bump-my-version twine

#
# Making a release
#
The ct-release script automates the release process, or you can do it manually:

# Increase the version number using bump-my-version
# Configuration is in pyproject.toml [tool.bumpversion] section
bump-my-version bump patch
# or
bump-my-version bump minor  
# or
bump-my-version bump major

git push
git push --tags

# Build and upload to PyPI
uv build
twine upload dist/* -r pypi

# Test installation
pip install compiletools


