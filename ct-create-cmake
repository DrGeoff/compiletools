#! /usr/bin/env python
# vim: set filetype=python:
from __future__ import print_function
import configargparse
import utils
from hunter import Hunter

class CMakefileCreator:

    """ Create a CMakefile.txt based on the filename, --static and --dynamic command line options """

    def __init__(self):
        utils.add_link_arguments()
        self.hunter = Hunter()

        # self.args will exist after this call
        utils.setattr_args(self)

    def create(self):
        with open("CMakeLists.txt", mode='w+') as cmf:
            cmf.write("# CMakeLists.txt generated by ct-create-cmake\n")
            cmf.write("cmake_minimum_required (VERSION 2.6)\n")
            cmf.write("project (CompileTools)\n")

            for source_filename in self.args.filename:
                src_realpath = utils.realpath(source_filename)
                exe_name = utils.executable_name(src_realpath)
                cmf.write("".join(["add_executable(",exe_name," ", src_realpath,")\n"]))

if __name__ == '__main__':
    cap = configargparse.getArgumentParser(
        description='Create a CMakefile.txt that will compile the given source file into an executable (or library). Each given file is assumed to be compiled into a separate executable and/or library.',
        formatter_class=configargparse.DefaultsRawFormatter)
    utils.add_target_arguments()
    cmakefile_creator = CMakefileCreator()
    myargs = cap.parse_known_args()
    utils.verbose_print_args(myargs[0])

    cmakefile_creator.create()
