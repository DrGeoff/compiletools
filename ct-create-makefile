#! /usr/bin/env python
# vim: set filetype=python:
from __future__ import print_function
import os.path
import configargparse
from headerhunter import HeaderDependencies

class Rule:
    """ A rule is a target, prerequisites and optionally a recipe
        https://www.gnu.org/software/make/manual/html_node/Rule-Introduction.html#Rule-Introduction
        Example: myrule = Rule(target='mytarget' prerequisites='file1.hpp file2.hpp', recipe='g++ -c mytarget.cpp -o mytarget.o')
        Note: it had to be a class rather than a dict so that we could hash it.
    """
    def __init__(self, target, prerequisites, recipe = None):
        self.target = target
        self.prerequisites = prerequisites
        self.recipe = recipe

    def __repr__(self):
        return "%s(%r)" % (self.__class__, self.__dict__)

    def __str__(self):
        return "%r" % (self.__dict__)

    def write(self, makefile):
        """ Write the given rule into the given Makefile."""
        makefile.write(self.target + ": " + self.prerequisites + "\n")
        try:
            makefile.write("\t" + self.recipe + "\n")
        except:
            pass
        makefile.write("\n")

def executable_name(source_filename):
    return  os.path.splitext(source_filename)[0]

def object_name(source_filename):
    basename = os.path.splitext(source_filename)[0]
    return basename + ".o"

def create_makefile_rules_for_target(target,header_dependencies):
    rules_for_target = set()
    deplist = header_dependencies.process(target)
    obj_name = object_name(target)
    rule_compile = Rule(
        target=obj_name,
        prerequisites=target + " " +
        " ".join(
            str(dep) for dep in deplist),
        recipe= myargs[0].CXX +
        " " +
        myargs[0].CXXFLAGS +
        " -c -o " +
        obj_name +
        " " +
        target)
    rules_for_target.add(rule_compile)
    return rules_for_target

def makefile_writer(rules, makefile_name='Makefile'):
    """ Take a list of rules and write the rules to a Makefile """
    with open(makefile_name, mode='w+') as mf:
        mf.write("# Makefile generated by ct-create-makefile\n")
        for rule in rules:
            rule.write(mf)

if __name__ == '__main__':
    cap = configargparse.getArgumentParser(
        description='Create a Makefile for the given list of targets. Each given file is assumed to be compiled into a separate executable and/or library.',
        formatter_class=configargparse.DefaultsRawFormatter)
    cap.add("-c", "--config", is_config_file=True, help="config file path")
    cap.add("filename", nargs='*', help="File to compile to an executable")
    cap.add(
        "--dynamic",
        nargs='*',
        help="File to compile to an dynamic library")
    cap.add(
        "--static",
        nargs='*',
        help="File to compile to an dynamic library")

    hh = HeaderDependencies()
    myargs = cap.parse_known_args()

    if myargs[0].verbose >= 1:
        print(myargs[0])
    if myargs[0].verbose >= 2:
        cap.print_values()

    rules = set()
    rule_all = Rule("all"," ".join(str(exe) for exe in map(executable_name,myargs[0].filename)))
    rules.add(rule_all)

    for target in myargs[0].filename:
        rules = rules | create_makefile_rules_for_target(target,hh)
    
    makefile_writer(rules=rules)
